/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddRecordWindow.java
 *
 * Created on 2011-03-12, 21:38:54
 */

package gui.editors;

import debug.DebugDisplay;
import entities.SubTask;
import entities.Lab;
import entities.Doctor;
import entities.Work;
import entities.WorkTask;
import entities.WorkType;
import entities.Worker;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import utilities.Cache;
import javax.swing.border.EtchedBorder;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Dimension;


/**
 *
 * @author Aleks
 */
public class WorkWindow extends javax.swing.JFrame {

    private ArrayList<WorkTask> elements = new ArrayList<WorkTask>();;
    Work work;
    boolean isNewWork;

    /** Creates new form AddRecordWindow */
    public WorkWindow(boolean isNewWork) {
    	
    	this.isNewWork = isNewWork;
        initComponents();
        setLocationRelativeTo(null);

        initFields();
        
        // za³aduj dane je¿eli to nie jest nowy obiekt
        if (!isNewWork){
        loadData();
        }
        
        //updateElementList(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labField = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        doctorField = new javax.swing.JComboBox();
        deliveryDateField = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        entityField = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        deadlineField = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        pacientField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        warningsField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        finishDateField = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dodaj pracê");
        setResizable(false);

        jPanel2.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));

        jLabel1.setText("data odebrania:");

        jLabel2.setText("gabinet:");

        jLabel4.setText("lekarz:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2Layout.setHorizontalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jLabel1)
        				.addComponent(deliveryDateField, GroupLayout.PREFERRED_SIZE, 123, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jLabel2)
        				.addComponent(labField, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE))
        			.addGap(39)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(doctorField, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel4))
        			.addGap(53))
        );
        jPanel2Layout.setVerticalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel1)
        				.addComponent(jLabel2)
        				.addComponent(jLabel4))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(labField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(doctorField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        				.addComponent(deliveryDateField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel2.setLayout(jPanel2Layout);

        jPanel3.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));

        jLabel5.setText("termin pracy:");

        jLabel6.setText("rodzaj pracy:");

        entityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateElementList(evt);
            }
        });

        jLabel7.setText("cena:");

        jLabel8.setText("z\u0142");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Element pracy", "Technik"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel3.setText("pacjent:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3Layout.setHorizontalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
        				.addGroup(jPanel3Layout.createSequentialGroup()
        					.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jLabel5)
        						.addComponent(deadlineField, GroupLayout.PREFERRED_SIZE, 126, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(entityField, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabel6))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(jPanel3Layout.createSequentialGroup()
        							.addComponent(priceField, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(jLabel8))
        						.addComponent(jLabel7))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jLabel3)
        						.addComponent(pacientField, GroupLayout.PREFERRED_SIZE, 133, GroupLayout.PREFERRED_SIZE))
        					.addPreferredGap(ComponentPlacement.RELATED, 22, Short.MAX_VALUE)))
        			.addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(jLabel5)
        					.addComponent(jLabel6))
        				.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(jLabel3)
        					.addComponent(jLabel7)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(pacientField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(jLabel8)
        					.addComponent(entityField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(priceField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        				.addComponent(deadlineField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3.setLayout(jPanel3Layout);

        jPanel4.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));

        jLabel10.setText("uwagi:");

        if (isNewWork){
	        jButton1.setText("dodaj");
	        jButton1.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                addRecord(evt);
	            }
	        });
        } else {
        	jButton1.setText("zmieñ");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    editRecord(evt);
                }
            });
        }

        CancelButton.setText("anuluj");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel(evt);
            }
        });

        jLabel11.setText("data wykonania:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(warningsField, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(finishDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jButton1)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(warningsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(finishDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CancelButton)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(jPanel4, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE))
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel
        this.dispose();
}//GEN-LAST:event_Cancel

    private void addRecord(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecord
	
	
	         try {
	
	        Work work = new Work();
	        work.setWorkType_id(((WorkType)entityField.getSelectedItem()).getId());
	        work.setDelivery_date(new java.sql.Date(deliveryDateField.getDate().getTime()));
	        work.setDeadline(new java.sql.Date(deadlineField.getDate().getTime()));
	        work.setDoctor_id(((Doctor)doctorField.getSelectedItem()).getId());
	        work.setPrice(Double.parseDouble(priceField.getText()));
	        
	        Lab lab = new Lab();
	        lab.setId(((Lab)labField.getSelectedItem()).getId());
	        work.setLab(lab);
	        work.setDescription(warningsField.getText().trim());
	        work.setPacient(pacientField.getText().trim());
	
	       
	        //dbconnection.DBConnection.conn.addWork(work);
	            
	        // dodawanie wykonaÅ
	        int rows = table.getRowCount();
	        
	        ArrayList<WorkTask> workTaskList = new ArrayList<WorkTask>();
	        
	        for (int i = 0; i < rows; i++) {
	            
	           int worker_id = ((Worker)table.getModel().getValueAt(i, 1)).getWorker_id();
	           
	           int czynnosc_skladowa_id = elements.get(i).getElement_id();
	           double provision = elements.get(i).getProvision();

	           
	            workTaskList.add( new WorkTask(
	                    worker_id,
	                    work.getWorkType_id(),
	                    czynnosc_skladowa_id,
	                    provision
	                    ));
	             }
	        
	        sildent.Config.conn.addWork(work,workTaskList);
	        sildent.Sildent.refreshWorkRegistry();
	        
	        
	        this.dispose();
	
	        } catch (Exception e) {
	            System.err.println(e);
	            e.printStackTrace();
	            JOptionPane.showMessageDialog(this,
	            "Dane wprowadzone w formularzu s¹ niepoprawne.\nDokonaj korekty lub skontaktuj siê z administratorem.",
	            "B³¹d danych wejciowych",
	            JOptionPane.ERROR_MESSAGE);
	        }
	
	}//GEN-LAST:event_addRecord

	private void editRecord(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecord


		ArrayList<WorkTask> workTaskList = new ArrayList<WorkTask>();
		
         try {

        //work = new Work();
        work.setWorkType_id(((WorkType)entityField.getSelectedItem()).getId());
        work.setDelivery_date(new java.sql.Date(deliveryDateField.getDate().getTime()));
        work.setDeadline(new java.sql.Date(deadlineField.getDate().getTime()));
        work.setDoctor_id(((Doctor)doctorField.getSelectedItem()).getId());
        work.setPrice(Double.parseDouble(priceField.getText()));
        //work.setLab_id(((Gabinet)labField.getSelectedItem()).getId());
        work.setDescription(warningsField.getText().trim());
      

       
        
            
        // dodawanie wykonaÅ
        int rows = table.getRowCount();
        for (int i = 0; i < rows; i++) {

           int worker_id = ((Worker)table.getModel().getValueAt(i, 1)).getWorker_id();
           
           int czynnosc_skladowa_id = elements.get(i).getElement_id();
           double provision = elements.get(i).getProvision();
           
           System.out.println("Provision: "+provision);
           
            workTaskList.add( new WorkTask(
                    worker_id,
                    work.getWorkType_id(),
                    czynnosc_skladowa_id,
                    provision
                    ));
            
            
  
            //sildent.Config.conn.deleteWork(work.getId());
            //sildent.Config.conn.addWork(work, workTaskList);
            sildent.Config.conn.updateWork(work, workTaskList);

             }
        this.dispose();

        } catch (Exception e) {
            System.err.println(e);
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
            "Dane wprowadzone w formularzu s¹ niepoprawne.\nDokonaj korekty lub skontaktuj siê z administratorem.",
            "B³¹d danych wejciowych",
            JOptionPane.ERROR_MESSAGE);
        }

}//GEN-LAST:event_addRecord

    private void updateElementList(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateElementList

    	System.out.println("Event: "+evt.getActionCommand());
    	
    	elements.clear();

        int worktype_id = ((WorkType)entityField.getSelectedItem()).getId();
        try {
            // sprawdÅº ile kosztuje
            priceField.setText(new Double(
                    sildent.Config.conn.getWorkPrice
                        (
                        worktype_id
                        )
                    ).toString());
        } catch (SQLException ex) {
            //Logger.getLogger(WorkWindow.class.getName()).log(Level.SEVERE, null, ex);
        	DebugDisplay.popup(this,ex);
        }

        //ArrayList<WorkTask> assignments = null;
        //sprawdÅ¼ jakie ma czynnoÅci skÅadowe i dodaj odpowiednie wiersze
        //ArrayList<SubTask> elements = new ArrayList<SubTask>();
        
        
        try {

        		ArrayList<SubTask> tasks = sildent.Config.conn.getSubTask(worktype_id);
        		for (int i = 0; i < tasks.size(); i++) {
					SubTask st = tasks.get(i);
					WorkTask wt = new WorkTask();
					//Worker w = new Worker();
					wt.setElement(st.getCzynnosc());
					wt.setElement_id(st.getId());
					wt.setProvision(st.getProwizja());
        			elements.add(wt);
					
				}

        } catch (SQLException ex) {
            //Logger.getLogger(WorkWindow.class.getName()).log(Level.SEVERE, null, ex);
        	DebugDisplay.popup(this,ex);
        }

        DefaultTableModel model = (DefaultTableModel)table.getModel();

        //System.out.println(elements.size());
            // clear table
            int rows = model.getRowCount();
            for (int i = 0; i < rows; i++) {
                model.removeRow(0);
            }

            // fill tables with data
            for (WorkTask element : elements) {
                model.addRow(new Object[]{
                    element.getElement(),
                    element.getWorker()
                });
                
               
            }
            
        try {
            // sprawdÅº jakich mamy technikÃ³w i dodaj ich do comboboxa w tabeli
            ArrayList<Worker> workers = sildent.Config.conn.getWorkerList();

             TableColumn sportColumn = table.getColumnModel().getColumn(1);

            JComboBox comboBox = new JComboBox();

            for (Worker worker : workers) {
                comboBox.addItem(worker);
            }
            sportColumn.setCellEditor(new DefaultCellEditor(comboBox));
        } catch (SQLException ex) {
            Logger.getLogger(WorkWindow.class.getName()).log(Level.SEVERE, null, ex);
            DebugDisplay.popup(this,ex);
        }
        

    }//GEN-LAST:event_updateElementList

    private void initFields(){
    	
    	
        try {

            // pozyskujemy i wstawiamy gabinety
            ArrayList<Lab> labs = sildent.Config.conn.getWorkplaceList();
            for (Lab lab : labs) {
               labField.addItem(lab); 
            }
            
            // pozyskujemy i wstawiamy lekarzy
            ArrayList<Doctor> doctors = sildent.Config.conn.getDoctorList();
            for (Doctor doctor : doctors) {
               doctorField.addItem(doctor); 
            }
            
            // pozyskujemy i wstawiamy typy prac
            ArrayList<WorkType> workTypes = sildent.Config.conn.getWorkTypesList();
            for (WorkType workType : workTypes) {
               entityField.addItem(workType); 
            }


        } catch (SQLException ex) {
            System.out.println("SQL exception: "+ex);

            //Logger.getLogger(WorkWindow.class.getName()).log(Level.SEVERE, null, ex);
            DebugDisplay.popup(this,ex);
        }
        
        deliveryDateField.setDate(new Date());

    }
    
    private void loadData(){

    	
    	
        if(Cache.work!=null){
            work = Cache.work;
            deliveryDateField.setDate(work.getDelivery_date());
            deadlineField.setDate(work.getDeadline());
            doctorField.setSelectedItem(work.getDoctor());
            for (int i = 0; i < entityField.getItemCount(); i++) {
                if ( entityField.getItemAt(i).toString().equalsIgnoreCase(work.getWork_type()) )
                    entityField.setSelectedIndex(i);
            }
            pacientField.setText(work.getPacient());
            warningsField.setText(work.getDescription());
        }
        
        loadTableAssignments();
    }

    private void loadTableAssignments() {
    	// elements table
    	int workId = -1;
    	if ( work != null )
    		workId = work.getId();
    	elements.clear();
    	try {
    		elements = sildent.Config.conn.getWorkTasksAndWorkers( workId );
    	} catch (SQLException e) {
    		// TODO Auto-generated catch block
    		e.printStackTrace();
    		DebugDisplay.popup(this,e);
    	}

    	DefaultTableModel model = (DefaultTableModel)table.getModel();

    	//System.out.println(elements.size());
    	// clear table
    	int rows = model.getRowCount();
    	for (int i = 0; i < rows; i++) {
    		model.removeRow(0);
    	}

    	// fill tables with data
    	for (WorkTask element : elements) {
    		model.addRow(new Object[]{
    				element.getElement(),
    				element.getWorker()
    		});


    	}
    }

    /**
    * @param args the command line arguments
    */

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private com.toedter.calendar.JDateChooser deadlineField;
    private com.toedter.calendar.JDateChooser deliveryDateField;
    private javax.swing.JComboBox doctorField;
    private javax.swing.JComboBox entityField;
    private com.toedter.calendar.JDateChooser finishDateField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox labField;
    private javax.swing.JTextField pacientField;
    private javax.swing.JTable table;
    private javax.swing.JTextField priceField;
    private javax.swing.JTextField warningsField;
    // End of variables declaration//GEN-END:variables

}
