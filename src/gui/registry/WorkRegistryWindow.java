/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WorkRegistryWindow.java
 *
 * Created on 2012-01-04, 16:28:30
 */

package gui.registry;

import debug.DebugDisplay;
import entities.Doctor;
import entities.Lab;
import entities.Work;
import gui.AddWorkWindow;
import gui.editors.WorkWindow;

import java.sql.Date;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

import sildent.Config;
import sildent.Refreshable;
import sildent.Sildent;
import utilities.Cache;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.border.EtchedBorder;
import javax.swing.JLabel;
import javax.swing.JTextField;
import com.toedter.calendar.JDateChooser;

/**
 *
 * @author Aleks
 */
public class WorkRegistryWindow extends javax.swing.JFrame implements Refreshable {

    ArrayList<Work> works=null;

    private int docId = -1;
    private int timeSpan = -1;
	private int labId = -1;
	private String patientName = "";
	private Date startDate = null;
	private Date stopDate = null;
	
	SimpleDateFormat dateFormat;
	

    /** Creates new form WorkRegistryWindow */
    public WorkRegistryWindow() {
    	
    	dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        initComponents();
        initFields();
        table.setAutoCreateRowSorter(rootPaneCheckingEnabled);


        setLocationRelativeTo(null);
        
        Sildent.workRegistry = this;
        Sildent.windows.add(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton5.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		markAccounted();
        	}
        });
        
        
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        doctorField = new javax.swing.JComboBox();
        spanField = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        labField = new javax.swing.JComboBox();
        
        
        

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ewidencja prac");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                WorkRegistryWindow.this.windowActivated(evt);
            }
        });

        table.setModel(new DefaultTableModel(
        	new Object[][] {
        		{null, null, null, null, null, null, null, null, null},
        	},
        	new String[] {
        		"Nr Pracy", "Typ Pracy", "Lekarz", "Gabinet", "Pacjent", "Termin", "Data Przyj\u0119cia", "W", "R"
        	}
        ) {
        	Class[] columnTypes = new Class[] {
        		Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Boolean.class, Boolean.class
        	};
        	public Class getColumnClass(int columnIndex) {
        		return columnTypes[columnIndex];
        	}
        	boolean[] columnEditables = new boolean[] {
        		true, true, true, true, true, true, true, false, false
        	};
        	public boolean isCellEditable(int row, int column) {
        		return columnEditables[column];
        	}
        });
        table.getColumnModel().getColumn(7).setResizable(false);
        table.getColumnModel().getColumn(7).setPreferredWidth(15);
        table.getColumnModel().getColumn(8).setResizable(false);
        table.getColumnModel().getColumn(8).setPreferredWidth(15);
        table.getColumnModel().getColumn(8).setMinWidth(10);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton2.setText("dodaj");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //getContentPane().add(evt);
                add(evt);
            }
        });

        jButton3.setText("edytuj");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit(evt);
            }
        });

        jButton4.setText("usuñ");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete(evt);
            }
        });

        jButton5.setText("oznacz jako rozliczone");
        
        JButton readyButton = new JButton();
        readyButton.setText("wykonane!");
        readyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markReady(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3Layout.setHorizontalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 67, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jButton3, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(readyButton)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(jButton5)
        			.addPreferredGap(ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
        			.addComponent(jButton4, GroupLayout.PREFERRED_SIZE, 67, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
        	jPanel3Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel3Layout.createSequentialGroup()
        			.addContainerGap(17, Short.MAX_VALUE)
        			.addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jButton2)
        				.addComponent(jButton3)
        				.addComponent(readyButton)
        				.addComponent(jButton4)
        				.addComponent(jButton5))
        			.addContainerGap())
        );
        jPanel3.setLayout(jPanel3Layout);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Filtruj:");

        jLabel4.setText("wykonywane dla:");

        doctorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorFieldchangedWorker(evt);
            }
        });
        
        /*patientField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorFieldchangedWorker(evt);
            }
            
        });*/

        spanField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ostatni tydzieñ", "Ostatni miesi¹c", "Ostatni rok", "Wszystko" }));
        spanField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spanFieldchangedSpan(evt);
            }
        });

        jLabel2.setText("dla gabinetu:");

        //labField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        labField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labFieldChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(13, 13, 13)
                .addComponent(spanField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(doctorField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(labField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(spanField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(doctorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        
        panel = new JPanel();
        panel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addContainerGap())
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addContainerGap())
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(panel, GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
        			.addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(panel, GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
        			.addContainerGap())
        );
        
        JLabel lblNewLabel = new JLabel("Pacjent:");
        
        patientField = new JTextField();
        patientField.setColumns(10);
        
        fromField = new JDateChooser();
        
        JLabel lblNewLabel_1 = new JLabel("Wykonano");
        
        JLabel lblOd = new JLabel("od");
        
        JLabel lblDo = new JLabel("do");
        
        toField = new JDateChooser();
        
        defaultSettingsButton = new JButton("domy\u015Blne");
        defaultSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreDefaults(evt);
            }
        });
        
        findButton = new JButton("szukaj");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find(evt);
            }
        });
        
        GroupLayout gl_panel = new GroupLayout(panel);
        gl_panel.setHorizontalGroup(
        	gl_panel.createParallelGroup(Alignment.LEADING)
        		.addGroup(gl_panel.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(lblNewLabel)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(patientField, GroupLayout.PREFERRED_SIZE, 107, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(lblNewLabel_1)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(lblOd)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(fromField, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(lblDo)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(toField, GroupLayout.PREFERRED_SIZE, 132, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
        			.addComponent(findButton)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(defaultSettingsButton)
        			.addContainerGap())
        );
        gl_panel.setVerticalGroup(
        	gl_panel.createParallelGroup(Alignment.LEADING)
        		.addGroup(gl_panel.createSequentialGroup()
        			.addGap(12)
        			.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING)
        				.addGroup(gl_panel.createParallelGroup(Alignment.BASELINE)
        					.addComponent(defaultSettingsButton)
        					.addComponent(findButton))
        				.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
        					.addComponent(lblDo)
        					.addComponent(toField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        				.addGroup(gl_panel.createSequentialGroup()
        					.addGroup(gl_panel.createParallelGroup(Alignment.BASELINE)
        						.addComponent(lblNewLabel)
        						.addComponent(patientField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(lblNewLabel_1)
        						.addComponent(lblOd))
        					.addGap(2))
        				.addGroup(Alignment.LEADING, gl_panel.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(fromField, GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)))
        			.addContainerGap())
        );
        panel.setLayout(gl_panel);
        jPanel1.setLayout(jPanel1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 488, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(23, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void find(ActionEvent evt) {
		
    	patientName = patientField.getText().trim();    	
    	try {
    		if (fromField.getDate() != null)
    			startDate = new java.sql.Date(fromField.getDate().getTime());
		} catch (Exception e) {
			e.printStackTrace();
			DebugDisplay.popup(this,e);
		}
    	try {
    		if (toField.getDate() != null)
    			stopDate = new java.sql.Date(toField.getDate().getTime());
		} catch (Exception e) {
			e.printStackTrace();
			DebugDisplay.popup(this,e);
		}
		
    	refreshTable();
	}

	protected void restoreDefaults(ActionEvent evt) {
		
		patientName = "";
		startDate = null;
		stopDate = null;
		
    	patientField.setText("");
    	fromField.setDate(null);
    	toField.setDate(null);
    	
    	refreshTable();
		
	}

	protected void labFieldChanged(ActionEvent evt) {

    	labId  = ((Lab)labField.getSelectedItem()).getId();
    	refreshTable();
    }//GEN-LAST:event_doctorFieldchangedWorker
    

	protected void markReady(ActionEvent evt) {
		
    	try {

            if(table.getSelectedRow()!= -1){
            	
            	// get work id
            	int workId = works.get(table.getSelectedRow()).getId();
                    //System.out.println(workId);
            	if ( (Boolean) table.getValueAt(table.getSelectedRow(), 7) ){
            		// is done - mark undone
            		Config.conn.markUnDone(workId);
            	} else{
            		// is not done - mark done
            		Config.conn.markDone(workId);
            	}
                    
                    
                    //System.out.println(table.getValueAt(table.getSelectedRow(), 8));
            	
                /*if ( table.getValueAt(table.getSelectedRow(), 0).toString().equals("false") )
                       Config.conn.markAccounted(workId);
                else
                	Config.conn.markUnaccounted(workId);*/
                 
                refreshTable();
            }

        } catch (Exception e) {
            System.err.println(e);
            e.printStackTrace();
            DebugDisplay.popup(this,e);
        }
	}

	protected void markAccounted() {
    	try {

            if(table.getSelectedRow()!= -1){
            	
            	// get work id
            	int workId = works.get(table.getSelectedRow()).getId();
            	if ( (Boolean) table.getValueAt(table.getSelectedRow(), 8) ){
            		// is done - mark undone
            		Config.conn.markUnaccounted(workId);
            	} else{
            		// is not done - mark done
            		Config.conn.markAccounted(workId);
            	}
                 
                refreshTable();
            }

        } catch (Exception e) {
            System.err.println(e);
            e.printStackTrace();
            DebugDisplay.popup(this,e);
        }
		
	}

	private void add(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add
        // TODO add your handling code here:
        new WorkWindow(true).setVisible(true);
    }//GEN-LAST:event_add

    private void delete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete

        System.out.println("Deleting row: "+table.getSelectedRow());
        try {

            if(table.getSelectedRow()!= -1){
                sildent.Config.conn.deleteWork(
                       //Integer.parseInt(table.getValueAt(table.getSelectedRow(), 0).toString())
                		works.get(table.getSelectedRow()).getId()
                        );
                refreshTable();
            }

        } catch (Exception e) {
            System.err.println(e);
            DebugDisplay.popup(this,e);
        }
    }//GEN-LAST:event_delete

    private void edit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit
        if (table.getSelectedRow() != -1) {
            Cache.work = works.get(table.getSelectedRow());
            new WorkWindow(false).setVisible(true);
        }
         //refreshTable();
    }//GEN-LAST:event_edit

    private void windowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowActivated
    	// delete button
        jButton4.setEnabled(Config.isAdmin);
        // set accounted button
        jButton5.setEnabled(Config.isAdmin);
    	//refreshTable();
    }//GEN-LAST:event_windowActivated

    private void doctorFieldchangedWorker(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorFieldchangedWorker

        docId = ((Doctor)doctorField.getSelectedItem()).getId();
        refreshTable();
}//GEN-LAST:event_doctorFieldchangedWorker

    private void spanFieldchangedSpan(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spanFieldchangedSpan
        switch (spanField.getSelectedIndex()){
            case 0:
                timeSpan = 7;
                break;
            case 1:
                timeSpan = 31;
                break;
            case 2:
                timeSpan = 365;
                break;
            case 3:
                timeSpan = -1;
                break;
        }
        refreshTable();
}//GEN-LAST:event_spanFieldchangedSpan

    public void refreshTable(){

        System.out.println("Refreshing table...");

        try {
            works = //dbconnection.DBConnection.conn.getWorkList();
                    sildent.Config.conn.getWorkList(docId, labId ,timeSpan, patientName, startDate, stopDate, true);

            DefaultTableModel model = (DefaultTableModel)table.getModel();

            // clear table
            int rows = model.getRowCount();
            for (int i = 0; i < rows; i++) {
                model.removeRow(0);
            }

            // fill tables with data
            for (Work work : works) {
                model.addRow(new Object[]{
                    //work.getId(),
                		work.getPrintId(),
                    work.getWork_type(),
                    work.getDoctor(),
                    work.getLab().getNazwa(),
                    work.getPacient(),
                    work.getDeadline(),
                    work.getDelivery_date(),
                    work.isStatus(),
                    work.isSettled()
                });
            }
            

        } catch (Exception e) {
            System.err.println(e);
            DebugDisplay.popup(this,e);
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WorkRegistryWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox doctorField;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox labField;
    private javax.swing.JComboBox spanField;
    private javax.swing.JTable table;
    private JPanel panel;
    private JTextField patientField;
    private JButton defaultSettingsButton;
    private JDateChooser fromField;
    private JDateChooser toField;
    private JButton findButton;
    // End of variables declaration//GEN-END:variables

    private void initFields() {
                try {

            // dodaj pole wszyscy w doktorach
            Doctor doc = new Doctor();
                    doc.setImie("Wszyscy");
                    doc.setNazwisko("");
                    doc.setId(-1);
            doctorField.addItem(doc);

            // pozyskujemy i wstawiamy doktorów
            ArrayList<Doctor> doctors = sildent.Config.conn.getDoctorList();
            for (Doctor doctor : doctors) {
               doctorField.addItem(doctor);
            }
            
         // dodaj pole wszyscy w labach
            Lab lab = new Lab();
                    lab.setNazwa("Wszyscy");
                    lab.setId(-1);
            labField.addItem(lab);

            // pozyskujemy i wstawiamy laby
            ArrayList<Lab> labs = sildent.Config.conn.getWorkplaceList();
            for (Lab l : labs) {
               labField.addItem(l);
            }
            
            //refreshTable();


        } catch (SQLException ex) {
            System.out.println("SQL exception: "+ex);

            //Logger.getLogger(AddWorkWindow.class.getName()).log(Level.SEVERE, null, ex);
            DebugDisplay.popup(this,ex);
        }
    }

	@Override
	public void refresh() {
		
		// delete button
        jButton4.setEnabled(Config.isAdmin);
        // set accounted button
        jButton5.setEnabled(Config.isAdmin);
		
	}
}

class WorkTableModel extends AbstractTableModel{
	
	Object[][] rowData = new Object[][] {};
	String[] columnNames = new String[] {
    		"Numer Pracy", "Typ Pracy", "Lekarz", "Gabinet", "Pacjent", "Termin", "Data Przyjêcia", "Rozliczono"
    	};

	@Override
	public int getColumnCount() {
		return columnNames.length;
	}

	@Override
	public int getRowCount() {
		return rowData.length;
	}

	@Override
	public Object getValueAt(int row, int column) {
		return rowData[row][column];
	}

	public String getColumnName(int column) {
		return columnNames[column];
	}

	public Class getColumnClass(int column) {
		return (getValueAt(0, column).getClass());
	}

	public void setValueAt(Object value, int row, int column) {
		rowData[row][column] = value;
	}

	public boolean isCellEditable(int row, int column) {
		return (column != 0);
	}
	
}
